//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/touch Test/TouchHandle.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchHandle: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchHandle()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchHandle"",
    ""maps"": [
        {
            ""name"": ""Tactil "",
            ""id"": ""b1293157-0ff2-472a-9526-049be85a8e79"",
            ""actions"": [
                {
                    ""name"": ""Toque"",
                    ""type"": ""Button"",
                    ""id"": ""9fe3a24a-9d00-42b9-a923-4ccc7bce6ed2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""af1e9b98-19d5-4001-adbd-e5866f89d381"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b012967c-12bd-4899-abf4-05a1c6194114"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9e5be5b-1a15-4cec-bc18-329b8084cad3"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tactil 
        m_Tactil = asset.FindActionMap("Tactil ", throwIfNotFound: true);
        m_Tactil_Toque = m_Tactil.FindAction("Toque", throwIfNotFound: true);
        m_Tactil_TapPosition = m_Tactil.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tactil 
    private readonly InputActionMap m_Tactil;
    private List<ITactilActions> m_TactilActionsCallbackInterfaces = new List<ITactilActions>();
    private readonly InputAction m_Tactil_Toque;
    private readonly InputAction m_Tactil_TapPosition;
    public struct TactilActions
    {
        private @TouchHandle m_Wrapper;
        public TactilActions(@TouchHandle wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toque => m_Wrapper.m_Tactil_Toque;
        public InputAction @TapPosition => m_Wrapper.m_Tactil_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_Tactil; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TactilActions set) { return set.Get(); }
        public void AddCallbacks(ITactilActions instance)
        {
            if (instance == null || m_Wrapper.m_TactilActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TactilActionsCallbackInterfaces.Add(instance);
            @Toque.started += instance.OnToque;
            @Toque.performed += instance.OnToque;
            @Toque.canceled += instance.OnToque;
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
        }

        private void UnregisterCallbacks(ITactilActions instance)
        {
            @Toque.started -= instance.OnToque;
            @Toque.performed -= instance.OnToque;
            @Toque.canceled -= instance.OnToque;
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
        }

        public void RemoveCallbacks(ITactilActions instance)
        {
            if (m_Wrapper.m_TactilActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITactilActions instance)
        {
            foreach (var item in m_Wrapper.m_TactilActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TactilActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TactilActions @Tactil => new TactilActions(this);
    public interface ITactilActions
    {
        void OnToque(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
